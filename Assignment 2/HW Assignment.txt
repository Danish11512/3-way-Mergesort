void do_depth_distribution(tree_node_t *tree, int *arr, int depth_counter) {

    if(tree == nullptr)
    {
        return;
    }

    if(!tree->right){
        arr[depth_counter]++;

        return;
    }
    depth_counter++;
    if(tree->left){
        do_depth_distribution(tree->left, arr, depth_counter);
    }
    if(tree->right)
    {
        do_depth_distribution(tree->right, arr, depth_counter);
    }
 }




int depth_distribution( tree_node_t * tree) {

    int total = 0;
    int depth_counter = 0;
    int a[100];

  
    for (int i = 0; i < 100; i++) {
        a[i] = 0;
    }

    do_depth_distribution(tree, a, depth_counter);



    if (depth_counter < 100) {
        for (int i = 0; i < 100; i++) {
            if (a[i] != 0) {
                total = total + a[i];
            }
        }
        std::cout << "Total number of leaves are " << total << std::endl;
        for (int i = 0; i<100; i++) {
            if(a[i] != 0){
                std::cout<< a[i]<< " leaves at depth "<<i << std::endl;
            }
        }
    }else{
        
            printf("depth greater than 99 found");
        }
    return 0;

    }